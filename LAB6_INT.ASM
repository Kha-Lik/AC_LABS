TITLE Власний оброблювач переривання 'COM1'
;------------------------------------------------------------------------------
; Дисципліна: Системне програмування
; НТУУ "КПІ"
; Факультет: ФІОТ
; Курс: 2
; Група: ІТ-81
;------------------------------------------------------------------------------
; Автор: Васкевич, Сніжок
; Дата: 30.10.2019
;------------------------------------------------------------------------------
IDEAL
;------------------------------------------------------------------------------
MACRO M_Exit
mov ah, 04Ch
int 21h
ENDM
;------------------------------------------------------------------------------
MACRO M_Init
mov ax, @data
mov ds, ax
mov es, ax
ENDM
MODEL small
STACK 256
DATASEG
bak_int0Bh_offset DW ? ; Ефективна адреса функції - стандартного
; обробника апаратного переривання COM1
bak_int0Bh_seg DW ? ; Адреса початку сегменту
; функції апаратного переривання COM1
msg db "IT-81 Vaskevych, Snizhok", 10, 13, "$"
CODESEG
PROC main
M_Init
;ЕТАП І. Отримання еф. адреси і зміщення переривання.--------------------
mov di, 48h
call GetIntVector
mov [bak_int0Bh_offset], bx
mov [bak_int0Bh_seg], es
;ЕТАП ІІ. Збереження стандартного обробника переривань СОМ 2 за іншим вектором
; Вільні вектора 60h - 6Bh
; Перенесення апаратного переривання СОМ 1 на наш вектор - 62h
; Використаємо функцію SetIntVector
mov di, 62h ; Вхідний аргумент SetIntVector – новий вектор DI для СОМ1
mov dx, bx ; Нове зміщення процедури DX (еф. адреса)
; Новий сегмент ES для процедури той же
call SetIntVector
int 62h
;ЕТАП ІІІ. Визначення нового обробника переривання з дод. функціоналом на вектор 0Bh.
; На вектор int0Bh заносимо новий функціонал і частину старого СОМ 2
; Підготовка аргументів
mov di, 48h ; DI Вхідний аргумент - номер старого вектора пер.СОМ
mov dx, OFFSET int48h ; DX Вхідний аргумент - еф. адреса нової проц.
mov ax, SEG int48h ; ES Вхідний аргумент - адреса сегмента нової проц.
mov es, ax
call SetIntVector
mov bx, OFFSET msg
int 48h
; ЕТАП ІV. Повернення переривання INT 0Bh у вихідний стан.
mov di, 48h
mov dx, [bak_int0Bh_offset]
mov ax, [bak_int0Bh_seg]
mov es, ax
call SetIntVector
xor al, al
M_Exit
ENDP main
;///////////////////////////////Опис процедур (функцій)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
;--------------------------------------------------------------------------
PROC GetIntVector
; Призначення: Отримання логічної адреси процедури (функції) обробки переривання за
; номером вектора переривання
; Вхід: DI <- номер вектора переривання
; Вихід: BX <- Ефективна адреса процедури (функції) обробки переривання
; ES <- Адреса сегмента процедури (функції) обробки переривання
;--------------------------------------------------------------------------
push ax
push di
xor ax, ax
mov es, ax
shl di, 2 ; Множимо DI на 4 (зв’язок номера переривання і адреси)
mov bx, [es:[di]] ; Ефективну адресу функції обробника в BX
mov ax, [es:[di + 2]] ; Адресу сегменту функції обробника в АХ
mov es, ax ; Адресу сегменту функції обробника таки до ES
pop di
pop ax
ret
ENDP GetIntVector
;--------------------------------------------------------------------------
PROC SetIntVector
; Призначення: Установка на номер вектора нової функції обробника.
; Функціонально: до пам’яті що відповідає вектору заносимо ефективну адресу і адресу
; сегменту нового обробника переривань
; На вхід: DI - номер переривання де буде нова процедура
; DX - ефективна адреса нового обробника
; ES - адреса сегмента нового обробника
; На вихід: ---
;--------------------------------------------------------------------------
 Cli ; Заборона апаратних переривань
; Наприкінці обов’язково <STI> бо залишаться забороненими - і
; МПС буде працювати не правильно
; <CLI ... STI> - це критична ділянка коду, яку не можна переривати
; Збереження регістрів
push ax
push di
push ds
xor ax, ax
mov ds, ax
shl di, 2
mov [ds:[di]], dx ; Еф. Адресу до першої частини вектору
mov [ds:[di + 2]], es ; Адресу сегменту до другої частини вектору
pop ds
pop di
pop ax
sti ; Дозвіл переривань. Відновлення вихідного стану МПС.
ret
ENDP SetIntVector
;--------------------------------------------------------------------------
PROC int48h
; Призначення: Нова процедура (функція) обробника переривання для COM.
; На вхід: bx - зміщення повідомлення
; На вихід: ---
;--------------------------------------------------------------------------
int 62h; ; Виклик стандартного обробника,
; він вже перепризначений на вектор 62.
mov  ah, 9
mov  dx, bx
int  21h
; код закінчення АППАРАРАТНОГО переривання
mov al, 20h
out 20h, al
iret ; Вихід з функції обробника відрізняється від звичайної процедрури
ENDP int48h
END main
